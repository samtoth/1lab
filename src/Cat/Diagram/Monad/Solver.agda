module Cat.Diagram.Monad.Solver where

open import 1Lab.Prelude hiding (id; _‚àò_; refl‚ü©‚àò‚ü®_; _‚ü©‚àò‚ü®refl)
open import 1Lab.Reflection hiding (_++_)

open import Cat.Base
open import Cat.Diagram.Monad

import Cat.Functor.Reasoning as FR
import Cat.Reasoning as CR

open import Data.List hiding (_++_)

module NbE {o h} {ùíû : Precategory o h} (M : Monad ùíû) where
  open CR ùíû
  module M = FR (Monad.M M)
  open Monad M

  --------------------------------------------------------------------------------
  -- NOTE: Object Expressions
  -- We can't index everything by 'Ob', as Agda will (rightfully) assume that M‚ÇÄ is not injective,
  -- which then inhibits on our ability to pattern match on things.
  -- Therefore, we introduce a reflected type of object expressions,
  -- which solves the injectivity issue.

  data ‚Ä∂Ob‚Ä∂ : Type o where
    ‚Ä∂_‚Ä∂   : Ob ‚Üí ‚Ä∂Ob‚Ä∂
    ‚Ä∂M‚ÇÄ‚Ä∂ : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂

  ‚ü¶_‚üß‚Çí : ‚Ä∂Ob‚Ä∂ ‚Üí Ob
  ‚ü¶ ‚Ä∂ X ‚Ä∂ ‚üß‚Çí = X
  ‚ü¶ ‚Ä∂M‚ÇÄ‚Ä∂ X ‚üß‚Çí = M‚ÇÄ ‚ü¶ X ‚üß‚Çí

  private variable
    W X Y Z : ‚Ä∂Ob‚Ä∂

  data ‚Ä∂Hom‚Ä∂ : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂ ‚Üí Type (o ‚äî h) where
    ‚Ä∂M‚ÇÅ‚Ä∂  : ‚Ä∂Hom‚Ä∂ X Y ‚Üí ‚Ä∂Hom‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ X) (‚Ä∂M‚ÇÄ‚Ä∂ Y)
    ‚Ä∂Œ∑‚Ä∂   : (X : ‚Ä∂Ob‚Ä∂) ‚Üí ‚Ä∂Hom‚Ä∂ X (‚Ä∂M‚ÇÄ‚Ä∂ X)
    ‚Ä∂Œº‚Ä∂   : (X : ‚Ä∂Ob‚Ä∂) ‚Üí ‚Ä∂Hom‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ X)) (‚Ä∂M‚ÇÄ‚Ä∂ X)
    _‚Ä∂‚àò‚Ä∂_ : ‚Ä∂Hom‚Ä∂ Y Z ‚Üí ‚Ä∂Hom‚Ä∂ X Y ‚Üí ‚Ä∂Hom‚Ä∂ X Z
    ‚Ä∂id‚Ä∂  : ‚Ä∂Hom‚Ä∂ X X
    _‚Üë    : ‚àÄ {X Y} ‚Üí Hom X Y ‚Üí ‚Ä∂Hom‚Ä∂ ‚Ä∂ X ‚Ä∂ ‚Ä∂ Y ‚Ä∂

  ‚ü¶_‚üß‚Çï : ‚Ä∂Hom‚Ä∂ X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  ‚ü¶ ‚Ä∂M‚ÇÅ‚Ä∂ f ‚üß‚Çï = M‚ÇÅ ‚ü¶ f ‚üß‚Çï
  ‚ü¶ ‚Ä∂Œ∑‚Ä∂ X ‚üß‚Çï = unit.Œ∑ ‚ü¶ X ‚üß‚Çí
  ‚ü¶ ‚Ä∂Œº‚Ä∂ X ‚üß‚Çï = mult.Œ∑ ‚ü¶ X ‚üß‚Çí
  ‚ü¶ e1 ‚Ä∂‚àò‚Ä∂ e2 ‚üß‚Çï = ‚ü¶ e1 ‚üß‚Çï ‚àò ‚ü¶ e2 ‚üß‚Çï
  ‚ü¶ ‚Ä∂id‚Ä∂ ‚üß‚Çï = id
  ‚ü¶ f ‚Üë ‚üß‚Çï = f

  --------------------------------------------------------------------------------
  -- Values

  data Frame : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂ ‚Üí Type (o ‚äî h) where
    khom  : ‚àÄ {X Y} ‚Üí Hom X Y ‚Üí Frame ‚Ä∂ X ‚Ä∂ ‚Ä∂ Y ‚Ä∂
    kmap  : Frame X Y ‚Üí Frame (‚Ä∂M‚ÇÄ‚Ä∂ X) (‚Ä∂M‚ÇÄ‚Ä∂ Y)
    kunit : (X : ‚Ä∂Ob‚Ä∂) ‚Üí Frame X (‚Ä∂M‚ÇÄ‚Ä∂ X)
    kmult : (X : ‚Ä∂Ob‚Ä∂) ‚Üí Frame (‚Ä∂M‚ÇÄ‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ X)) (‚Ä∂M‚ÇÄ‚Ä∂ X)

  data Value : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂ ‚Üí Type (o ‚äî h) where
    [] : Value X X
    _‚à∑_ : Frame Y Z ‚Üí Value X Y ‚Üí Value X Z

  infixr 20 _‚à∑_

  ‚ü¶_‚üß‚Çñ : Frame X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  ‚ü¶ khom f ‚üß‚Çñ = f
  ‚ü¶ kmap k ‚üß‚Çñ = M‚ÇÅ ‚ü¶ k ‚üß‚Çñ
  ‚ü¶ kunit X ‚üß‚Çñ = unit.Œ∑ ‚ü¶ X ‚üß‚Çí
  ‚ü¶ kmult X ‚üß‚Çñ = mult.Œ∑ ‚ü¶ X ‚üß‚Çí

  ‚ü¶_‚üß·µ• : Value X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  ‚ü¶ [] ‚üß·µ• = id
  ‚ü¶ k ‚à∑ v ‚üß·µ• = ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•

  --------------------------------------------------------------------------------
  -- Evaluation
  --
  -- The evaluation strategy here is a bit subtle. The naive option
  -- is to push the 'kunit' frames all the way to the bottom of the stack,
  -- but this makes enacting the 'Œº ‚àò Œ∑' equations inneficient, as that
  -- means we will also have to push the 'kmult' frames all the way to the bottom
  -- as well.
  --
  -- Instead, what we do is push the 'kmap' frames past all of the 'kunit' and 'kmult'
  -- frames, which ensures that all of the 'kunit' and 'kmult' frames remain on the top
  -- of the stack. This makes it easier to enact the equations in question, as
  -- we don't have to dig nearly as far.

  -- Concatenate 2 values together, performing no simplification.
  _++_ : Value Y Z ‚Üí Value X Y ‚Üí Value X Z
  [] ++ v2 = v2
  (k ‚à∑ v1) ++ v2 = k ‚à∑ (v1 ++ v2)

  -- Apply M‚ÇÅ to a value.
  do-vmap : Value X Y ‚Üí Value (‚Ä∂M‚ÇÄ‚Ä∂ X) (‚Ä∂M‚ÇÄ‚Ä∂ Y)
  do-vmap [] = []
  do-vmap (f ‚à∑ v) = kmap f ‚à∑ do-vmap v

  enact-laws : Frame Y Z ‚Üí Frame X Y ‚Üí Value W X ‚Üí Value W Z
  push-frm : Frame Y Z ‚Üí Value X Y ‚Üí Value X Z

  -- The meat of the solver! This is responsible for enacting the
  -- monad equations (hence the name).
  -- There are 2 important phases to this function: 'kunit' and 'kmult'
  -- floating, and the subsequent elimination of those frames.
  --
  -- When we push a 'kmap' frame, we check to see if the head of the stack
  -- is a 'kunit' or 'kmult'; if so, we float those outwards so that they
  -- always remain at the top of the stack.
  --
  -- Subsequently, when pushing a 'kmult' frame, we need to enact
  -- equations. As the relevant frames are /always/ on the top of the stack,
  -- we can simply apply the relevant equations, and potentially keep pushing
  -- frames down.
  enact-laws (khom f) k' v = khom f ‚à∑ k' ‚à∑ v
  enact-laws (kmap k) (kmap k') v = do-vmap (enact-laws k k' []) ++ v
  enact-laws (kmap k) (kunit _) v = kunit _ ‚à∑ push-frm k v
  enact-laws (kmap k) (kmult _) v = kmult _ ‚à∑ push-frm (kmap (kmap k)) v
  enact-laws (kunit _) k' v = kunit _ ‚à∑ k' ‚à∑ v
  enact-laws (kmult _) (kmap (kmap k')) v = kmult _ ‚à∑ kmap (kmap k') ‚à∑ v
  enact-laws (kmult _) (kmap (kunit _)) v = v
  enact-laws (kmult _) (kmap (kmult _)) v = kmult _ ‚à∑ push-frm (kmult _) v
  enact-laws (kmult _) (kunit _) v = v
  enact-laws (kmult _) (kmult _) v = kmult _ ‚à∑ kmult _ ‚à∑ v

  -- Small shim, used to enact a law against a potentially empty stack.
  push-frm k [] = k ‚à∑ []
  push-frm k (k' ‚à∑ v) = enact-laws k k' v

  -- Concatenate 2 stacks together, performing simplification via 'enact-laws'.
  do-vcomp : Value Y Z ‚Üí Value X Y ‚Üí Value X Z
  do-vcomp [] v2 = v2
  do-vcomp (k ‚à∑ v1) v2 = push-frm k (do-vcomp v1 v2)

  eval : ‚Ä∂Hom‚Ä∂ X Y ‚Üí Value X Y
  eval (‚Ä∂M‚ÇÅ‚Ä∂ e) = do-vmap (eval e)
  eval (‚Ä∂Œ∑‚Ä∂ X) = kunit X ‚à∑ []
  eval (‚Ä∂Œº‚Ä∂ X) = kmult X ‚à∑ []
  eval (e1 ‚Ä∂‚àò‚Ä∂ e2) = do-vcomp (eval e1) (eval e2)
  eval ‚Ä∂id‚Ä∂ = []
  eval (f ‚Üë) = khom f ‚à∑ []

  --------------------------------------------------------------------------------
  -- Soundness

  vmap-sound : ‚àÄ (v : Value X Y) ‚Üí ‚ü¶ do-vmap v ‚üß·µ• ‚â° M‚ÇÅ ‚ü¶ v ‚üß·µ•
  vmap-sound [] = sym M-id
  vmap-sound (k ‚à∑ v) =
    M‚ÇÅ ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ do-vmap v ‚üß·µ• ‚â°‚ü® refl‚ü©‚àò‚ü® vmap-sound v ‚ü©
    M‚ÇÅ ‚ü¶ k ‚üß‚Çñ ‚àò M‚ÇÅ ‚ü¶ v ‚üß·µ•      ‚â°Àò‚ü® M-‚àò ‚ü¶ k ‚üß‚Çñ ‚ü¶ v ‚üß·µ• ‚ü©
    M‚ÇÅ (‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•)       ‚àé

  vconcat-sound : ‚àÄ (v1 : Value Y Z) ‚Üí (v2 : Value X Y) ‚Üí ‚ü¶ v1 ++ v2 ‚üß·µ• ‚â° ‚ü¶ v1 ‚üß·µ• ‚àò ‚ü¶ v2 ‚üß·µ•
  vconcat-sound [] v2 = sym (idl ‚ü¶ v2 ‚üß·µ•)
  vconcat-sound (k ‚à∑ v1) v2 = pushr (vconcat-sound v1 v2)

  enact-laws-sound : ‚àÄ (k1 : Frame Y Z) ‚Üí (k2 : Frame X Y) ‚Üí (v : Value W X) ‚Üí ‚ü¶ enact-laws k1 k2 v ‚üß·µ• ‚â° ‚ü¶ k1 ‚üß‚Çñ ‚àò ‚ü¶ k2 ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•
  push-frm-sound   : ‚àÄ (k : Frame Y Z) ‚Üí (v : Value X Y) ‚Üí ‚ü¶ push-frm k v ‚üß·µ• ‚â° ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•

  enact-laws-sound (khom x) k2 v = refl
  enact-laws-sound (kmap k1) (kmap k2) v =
    ‚ü¶ do-vmap (enact-laws k1 k2 []) ++ v ‚üß·µ•     ‚â°‚ü® vconcat-sound (do-vmap (enact-laws k1 k2 [])) v ‚ü©
    ‚ü¶ do-vmap (enact-laws k1 k2 []) ‚üß·µ• ‚àò ‚ü¶ v ‚üß·µ• ‚â°‚ü® vmap-sound (enact-laws k1 k2 []) ‚ü©‚àò‚ü®refl ‚ü©
    M‚ÇÅ ‚ü¶ enact-laws k1 k2 [] ‚üß·µ• ‚àò ‚ü¶ v ‚üß·µ•        ‚â°‚ü® M.pushl (enact-laws-sound k1 k2 []) ‚ü©
    M‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò M‚ÇÅ (‚ü¶ k2 ‚üß‚Çñ ‚àò id) ‚àò ‚ü¶ v ‚üß·µ•     ‚â°‚ü® refl‚ü©‚àò‚ü® (M.‚ü® idr ‚ü¶ k2 ‚üß‚Çñ ‚ü© ‚ü©‚àò‚ü®refl) ‚ü©
    M‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò M‚ÇÅ ‚ü¶ k2 ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•            ‚àé
  enact-laws-sound (kmap {Y = Y} k1) (kunit X) v =
    unit.Œ∑ ‚ü¶ Y ‚üß‚Çí ‚àò ‚ü¶ push-frm k1 v ‚üß·µ•    ‚â°‚ü® refl‚ü©‚àò‚ü® push-frm-sound k1 v ‚ü©
    unit.Œ∑ ‚ü¶ Y ‚üß‚Çí ‚àò ‚ü¶ k1 ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•      ‚â°‚ü® extendl (unit.is-natural ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí ‚ü¶ k1 ‚üß‚Çñ) ‚ü©
    M.F‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò unit.Œ∑ ‚ü¶ X ‚üß‚Çí ‚àò ‚ü¶ v ‚üß·µ• ‚àé
  enact-laws-sound (kmap {Y = Y} k1) (kmult X) v =
    mult.Œ∑ ‚ü¶ Y ‚üß‚Çí ‚àò ‚ü¶ push-frm (kmap (kmap k1)) v ‚üß·µ• ‚â°‚ü® refl‚ü©‚àò‚ü® push-frm-sound (kmap (kmap k1)) v ‚ü©
    mult.Œ∑ ‚ü¶ Y ‚üß‚Çí ‚àò M‚ÇÅ (M‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ) ‚àò ‚ü¶ v ‚üß·µ•         ‚â°‚ü® extendl (mult.is-natural ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí ‚ü¶ k1 ‚üß‚Çñ) ‚ü©
    M.F‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò mult.Œ∑ ‚ü¶ X ‚üß‚Çí ‚àò ‚ü¶ v ‚üß·µ•            ‚àé
  enact-laws-sound (kunit X) k2 v = refl
  enact-laws-sound (kmult X) (kmap (kmap k2)) v = refl
  enact-laws-sound (kmult X) (kmap (kunit .X)) v = insertl left-ident
  enact-laws-sound (kmult X) (kmap (kmult .X)) v =
    mult.Œ∑ ‚ü¶ X ‚üß‚Çí ‚àò ‚ü¶ push-frm (kmult (‚Ä∂M‚ÇÄ‚Ä∂ X)) v ‚üß·µ• ‚â°‚ü® refl‚ü©‚àò‚ü® push-frm-sound (kmult (‚Ä∂M‚ÇÄ‚Ä∂ X)) v ‚ü©
    mult.Œ∑ ‚ü¶ X ‚üß‚Çí ‚àò mult.Œ∑ (M‚ÇÄ ‚ü¶ X ‚üß‚Çí) ‚àò ‚ü¶ v ‚üß·µ•      ‚â°‚ü® extendl (sym mult-assoc) ‚ü©
    mult.Œ∑ ‚ü¶ X ‚üß‚Çí ‚àò M‚ÇÅ (mult.Œ∑ ‚ü¶ X ‚üß‚Çí) ‚àò ‚ü¶ v ‚üß·µ•      ‚àé
  enact-laws-sound (kmult X) (kunit _) v = insertl right-ident
  enact-laws-sound (kmult X) (kmult _) v = refl

  push-frm-sound k [] = refl
  push-frm-sound k (k' ‚à∑ v) = enact-laws-sound k k' v

  vcomp-sound : ‚àÄ (v1 : Value Y Z) ‚Üí (v2 : Value X Y) ‚Üí ‚ü¶ do-vcomp v1 v2 ‚üß·µ• ‚â° ‚ü¶ v1 ‚üß·µ• ‚àò ‚ü¶ v2 ‚üß·µ•
  vcomp-sound [] v2 = sym (idl ‚ü¶ v2 ‚üß·µ•)
  vcomp-sound (k ‚à∑ v1) v2 =
    ‚ü¶ push-frm k (do-vcomp v1 v2) ‚üß·µ• ‚â°‚ü® push-frm-sound k (do-vcomp v1 v2) ‚ü©
    ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ do-vcomp v1 v2 ‚üß·µ•     ‚â°‚ü® pushr (vcomp-sound v1 v2) ‚ü©
    (‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v1 ‚üß·µ•) ‚àò ‚ü¶ v2 ‚üß·µ•     ‚àé

  eval-sound : ‚àÄ (e : ‚Ä∂Hom‚Ä∂ X Y) ‚Üí ‚ü¶ eval e ‚üß·µ• ‚â° ‚ü¶ e ‚üß‚Çï
  eval-sound (‚Ä∂M‚ÇÅ‚Ä∂ e) =
    ‚ü¶ do-vmap (eval e) ‚üß·µ• ‚â°‚ü® vmap-sound (eval e) ‚ü©
    M‚ÇÅ ‚ü¶ eval e ‚üß·µ•        ‚â°‚ü® M.‚ü® eval-sound e ‚ü© ‚ü©
    M‚ÇÅ ‚ü¶ e ‚üß‚Çï ‚àé
  eval-sound (‚Ä∂Œ∑‚Ä∂ X) = idr (unit.Œ∑ ‚ü¶ X ‚üß‚Çí)
  eval-sound (‚Ä∂Œº‚Ä∂ X) = idr (mult.Œ∑ ‚ü¶ X ‚üß‚Çí)
  eval-sound (e1 ‚Ä∂‚àò‚Ä∂ e2) =
    ‚ü¶ do-vcomp (eval e1) (eval e2) ‚üß·µ• ‚â°‚ü® vcomp-sound (eval e1) (eval e2) ‚ü©
    ‚ü¶ eval e1 ‚üß·µ• ‚àò ‚ü¶ eval e2 ‚üß·µ•       ‚â°‚ü® ap‚ÇÇ _‚àò_ (eval-sound e1) (eval-sound e2) ‚ü©
    ‚ü¶ e1 ‚üß‚Çï ‚àò ‚ü¶ e2 ‚üß‚Çï                 ‚àé
  eval-sound ‚Ä∂id‚Ä∂ = refl
  eval-sound (f ‚Üë) = idr f

  abstract
    solve : ‚àÄ (e1 e2 : ‚Ä∂Hom‚Ä∂ X Y) ‚Üí ‚ü¶ eval e1 ‚üß·µ• ‚â° ‚ü¶ eval e2 ‚üß·µ• ‚Üí ‚ü¶ e1 ‚üß‚Çï ‚â° ‚ü¶ e2 ‚üß‚Çï
    solve e1 e2 p = sym (eval-sound e1) ¬∑¬∑ p ¬∑¬∑ eval-sound e2

module Reflection where

  pattern category-args xs =
    _ hm‚à∑ _ hm‚à∑ _ v‚à∑ xs

  pattern functor-args functor xs =
    _ hm‚à∑ _ hm‚à∑ _ hm‚à∑ _ hm‚à∑ _ hm‚à∑ _ hm‚à∑ functor v‚à∑ xs

  pattern nat-trans-args nt args =
    _ hm‚à∑ _ hm‚à∑ _ hm‚à∑ _ hm‚à∑
    _ hm‚à∑ _ hm‚à∑
    _ hm‚à∑ _ hm‚à∑
    nt v‚à∑ args


  pattern monad-args monad xs =
    _ hm‚à∑ _ hm‚à∑ _ hm‚à∑ monad v‚à∑ xs

  pattern monad-fn-args monad xs =
    _ h‚à∑ _ h‚à∑ _ h‚à∑ monad v‚à∑ xs

  pattern ‚Äúid‚Äù =
    def (quote Precategory.id) (category-args (_ h‚à∑ []))

  pattern ‚Äú‚àò‚Äù f g =
    def (quote Precategory._‚àò_) (category-args (_ h‚à∑ _ h‚à∑ _ h‚à∑ f v‚à∑ g v‚à∑ []))

  pattern ‚ÄúM‚ÇÄ‚Äù monad x =
    def (quote Monad.M‚ÇÄ) (monad-fn-args monad (x v‚à∑ []))

  pattern ‚ÄúM‚ÇÅ‚Äù monad f =
    def (quote Monad.M‚ÇÅ) (monad-fn-args monad (_ h‚à∑ _ h‚à∑ f v‚à∑ []))

  pattern ‚ÄúŒ∑‚Äù monad x =
    def (quote _=>_.Œ∑) (nat-trans-args (def (quote Monad.unit) (monad-args monad [])) (x v‚à∑ []))

  pattern ‚ÄúŒº‚Äù monad x =
    def (quote _=>_.Œ∑) (nat-trans-args (def (quote Monad.mult) (monad-args monad [])) (x v‚à∑ []))

  mk-monad-args : Term ‚Üí List (Arg Term) ‚Üí List (Arg Term)
  mk-monad-args monad args = unknown h‚à∑ unknown h‚à∑ unknown h‚à∑ monad v‚à∑ args

  ‚Äúsolve‚Äù : Term ‚Üí Term ‚Üí Term ‚Üí Term
  ‚Äúsolve‚Äù monad lhs rhs =
    def (quote NbE.solve) (mk-monad-args monad $ infer-hidden 2 $ lhs v‚à∑ rhs v‚à∑ def (quote refl) [] v‚à∑ [])

  build-object-expr : Term ‚Üí Term ‚Üí TC Term
  build-object-expr monad (‚ÄúM‚ÇÄ‚Äù monad' x) = do
    unify monad monad'
    x ‚Üê build-object-expr monad x
    pure $ con (quote NbE.‚Ä∂M‚ÇÄ‚Ä∂) (x v‚à∑ [])
  build-object-expr monad x =
    pure $ con (quote NbE.‚Ä∂_‚Ä∂) (x v‚à∑ [])

  build-hom-expr : Term ‚Üí Term ‚Üí TC Term
  build-hom-expr monad ‚Äúid‚Äù =
    pure $ con (quote NbE.‚Ä∂id‚Ä∂) []
  build-hom-expr monad (‚Äú‚àò‚Äù f g) = do
    f ‚Üê build-hom-expr monad f
    g ‚Üê build-hom-expr monad g
    pure $ con (quote NbE._‚Ä∂‚àò‚Ä∂_) (f v‚à∑ g v‚à∑ [])
  build-hom-expr monad (‚ÄúM‚ÇÅ‚Äù monad' f) = do
    unify monad monad'
    f ‚Üê build-hom-expr monad f
    pure $ con (quote NbE.‚Ä∂M‚ÇÅ‚Ä∂) (f v‚à∑ [])
  build-hom-expr monad (‚ÄúŒ∑‚Äù monad' x) = do
    unify monad monad'
    x ‚Üê build-object-expr monad x
    pure $ con (quote NbE.‚Ä∂Œ∑‚Ä∂) (x v‚à∑ [])
  build-hom-expr monad (‚ÄúŒº‚Äù monad' x) = do
    x ‚Üê build-object-expr monad x
    unify monad monad'
    pure $ con (quote NbE.‚Ä∂Œº‚Ä∂) (x v‚à∑ [])
  build-hom-expr monad f =
    pure $ con (quote NbE._‚Üë) (f v‚à∑ [])

  dont-reduce : List Name
  dont-reduce =
    quote Precategory.id ‚à∑ quote Precategory._‚àò_ ‚à∑
    quote Functor.F‚ÇÄ ‚à∑ quote Functor.F‚ÇÅ ‚à∑
    quote _=>_.Œ∑ ‚à∑
    quote Monad.M ‚à∑ quote Monad.unit ‚à∑ quote Monad.mult ‚à∑ []

  solve-macro : ‚àÄ {o h} {ùíû : Precategory o h} ‚Üí Monad ùíû ‚Üí Term ‚Üí TC ‚ä§
  solve-macro monad hole =
    withNormalisation false $
    withReduceDefs (false , dont-reduce) $ do
      monad-tm ‚Üê quoteTC monad
      goal ‚Üê infer-type hole >>= reduce
      just (lhs , rhs) ‚Üê get-boundary goal
        where nothing ‚Üí typeError $ strErr "Can't determine boundary: " ‚à∑
                                    termErr goal ‚à∑ []
      elhs ‚Üê build-hom-expr monad-tm lhs
      erhs ‚Üê build-hom-expr monad-tm rhs
      noConstraints $ unify hole (‚Äúsolve‚Äù monad-tm elhs erhs)

macro
  monad! : ‚àÄ {o h} {ùíû : Precategory o h} ‚Üí Monad ùíû ‚Üí Term ‚Üí TC ‚ä§
  monad! monad = Reflection.solve-macro monad

private module Test {o h} {ùíû : Precategory o h} (monad : Monad ùíû) where
  open Precategory ùíû
  open Monad monad

  variable
    A B C : Ob

  test : ‚àÄ {f : Hom B C} {g : Hom A B}
         ‚Üí mult.Œ∑ C ‚àò M‚ÇÅ (M‚ÇÅ (f ‚àò g)) ‚àò unit.Œ∑ (M‚ÇÄ A) ‚â° M‚ÇÅ f ‚àò M‚ÇÅ (id ‚àò g)
  test = monad! monad

  test-assoc : ‚àÄ X ‚Üí mult.Œ∑ X ‚àò M‚ÇÅ (mult.Œ∑ X) ‚â° mult.Œ∑ X ‚àò mult.Œ∑ (M‚ÇÄ X)
  test-assoc X = monad! monad

  test-nested : ‚àÄ X ‚Üí M‚ÇÅ (mult.Œ∑ X ‚àò unit.Œ∑ (M‚ÇÄ X)) ‚â° id
  test-nested _ = monad! monad

  test-separate : ‚àÄ X ‚Üí M‚ÇÅ (mult.Œ∑ X) ‚àò M‚ÇÅ (unit.Œ∑ (M‚ÇÄ X)) ‚â° id
  test-separate _ = monad! monad
